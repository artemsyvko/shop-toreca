<?php

namespace Plugin\SlnPayment42\Repository;

use Eccube\Repository\AbstractRepository;
use Eccube\Entity\Order;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\Yaml\Yaml;
use Doctrine\Persistence\ManagerRegistry;
use Plugin\SlnPayment42\Entity\OrderPaymentStatus;

/**
 * OrderPaymentStatusRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderPaymentStatusRepository extends AbstractRepository
{
    /**
     * @var ContainerInterface
     */
    protected $container;

    public function __construct(
        ManagerRegistry $registry,
        ContainerInterface $container
    )
    {
        parent::__construct($registry, OrderPaymentStatus::class);
        $this->container = $container;
    }

    /**
     * @param Order $Order
     * @return \Plugin\SlnPayment42\Entity\OrderPaymentStatus
     */
    public function getStatus(Order $Order)
    {
        //ステータス存在判断
        $orderId = $Order->getId();
        $paymentStatus = $this->find($orderId);
        
        if (is_null($paymentStatus)) {
            $paymentStatus = new OrderPaymentStatus($orderId);
        }
        
        return $paymentStatus;
    }
    
    /**
     * 決済状況を変更する
     * @param Order $Order
     * @param unknown $status
     * @param unknown $amount
     * @param unknown $cvsCd
     */
    public function setOrderStatus(Order $Order, $status, $amount = null, $cvsCd = null)
    {
        $payStatus = $this->getStatus($Order);
        
        if (!is_null($status)) {
            $payStatus->setPaymentStatus($status);
        }
        
        if (!is_null($amount)) {
            $payStatus->setAmount($amount);
        }
        
        if (!is_null($cvsCd)) {
            $payStatus->setPayee($cvsCd);
        }
        
        $em = $this->getEntityManager();
        $em->persist($payStatus);
        $em->flush();
    }
    
    /**
     * 未確定
     * @param Order $Order
     */
    public function unsettled(Order $Order)
    {
        $this->setOrderStatus($Order, $this->container->getParameter('arrPayStatus')['UNSETTLED']);
    }
    
    /**
     * 要求成功
     * @param Order $Order
     */
    public function requestSuccess(Order $Order, $amount)
    {
        $this->setOrderStatus($Order, $this->container->getParameter('arrPayStatus')['REQUEST_SUCCESS'], $amount);
    }
    
    /**
     * 支払い完了
     * @param Order $Order
     */
    public function paySuccess(Order $Order, $cvsCd = null)
    {
        $this->setOrderStatus($Order, $this->container->getParameter('arrPayStatus')['PAY_SUCCESS'], null, $cvsCd);
    }
    
    /**
     * キャンセル
     * @param Order $Order
     */
    public function cancel(Order $Order)
    {
        $this->setOrderStatus($Order, $this->container->getParameter('arrPayStatus')['CANCEL']);
    }
    
    /**
     * 仮売上済み
     * @param Order $Order
     */
    public function auth(Order $Order, $amount)
    {
        $this->setOrderStatus($Order, $this->container->getParameter('arrPayStatus')['AUTH'], $amount);
    }
    
    /**
     * 実売上済み
     * @param Order $Order
     */
    public function commit(Order $Order, $amount)
    {
        $this->setOrderStatus($Order, $this->container->getParameter('arrPayStatus')['COMMIT'], $amount);
    }
    
    /**
     * 即時売上げ済み
     * @param Order $Order
     */
    public function capture(Order $Order, $amount)
    {
        $this->setOrderStatus($Order, $this->container->getParameter('arrPayStatus')['CAPTURE'], $amount);
    }
    
    /**
     * 取消済み
     * @param Order $Order
     */
    public function void(Order $Order)
    {
        $this->setOrderStatus($Order, $this->container->getParameter('arrPayStatus')['VOID']);
    }
    
    /**
     * 決済失敗
     * @param Order $Order
     */
    public function fail(Order $Order)
    {
        $this->setOrderStatus($Order, $this->container->getParameter('arrPayStatus')['FAIL']);
    }
    
    /**
     * 決済金額を変更する
     * @param Order $Order
     * @param unknown $amount
     */
    public function change(Order $Order, $amount) {
        $this->setOrderStatus($Order, null, $amount);
    }
    
    /**
     * ステータス名をとる
     * @param integer $statusCode
     * @return mixed
     */
    public function getPayStatusName($statusCode)
    {
        if (empty($statusCode)) {
            return "";
        }
        return array_flip($this->container->getParameter('arrPayStatusNames'))[$statusCode];
    }
}
