<?php

namespace Plugin\SlnPayment42\Repository;

use Eccube\Repository\AbstractRepository;
use Doctrine\Persistence\ManagerRegistry;
use Plugin\SlnPayment42\Entity\OrderPaymentHistory;
use Plugin\SlnPayment42\Service\Util;
use Plugin\SlnPayment42\Service\SlnAction\Content\Basic;

/**
 * OrderPaymentHistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderPaymentHistoryRepository extends AbstractRepository
{
    /**
     * @var util
     */
    protected $util;

    public function __construct(
        ManagerRegistry $registry,
        Util $util
    ) {
        parent::__construct($registry, OrderPaymentHistory::class);
        $this->util = $util;
    }

    /**
     * @param unknown $orderId
     * @param \Plugin\SlnPayment42\Service\SlnContent\Basic $basic
     * @return \Plugin\SlnPayment42\Entity\OrderPaymentHistory
     */
    protected function addLog($orderId, \Plugin\SlnPayment42\Service\SlnContent\Basic $basic)
    {
        $OrderPaymentHistory = new OrderPaymentHistory();
        return $OrderPaymentHistory->setMerchantId($basic->getMerchantId())
            ->setTransactionId($basic->getTransactionId())
            ->setOperateId($basic->getOperateId())
            ->setProcessId($basic->getProcessId())
            ->setResponseCd($basic->getResponseCd())
            ->setOrderId($orderId);
    }
    
    /**
     * @param unknown $orderId
     * @param Basic $basic
     */
    public function addSendResponseLog($orderId, Basic $basic)
    {
        $this->getEntityManager()->persist(
            $this->addLog($orderId, $basic->getContent())
            ->setRequestFlg(0)
            ->setSendFlg(1)
            ->setBody(json_encode($this->util->logDataReset($basic->getPostData())))
        );
        $this->getEntityManager()->flush();
    }
    
    /**
     * @param unknown $orderId
     * @param Basic $basic
     */
    public function addSendRequestLog($orderId, Basic $basic)
    {
        $this->getEntityManager()->persist(
            $this->addLog($orderId, $basic->getContent())
            ->setRequestFlg(1)
            ->setSendFlg(1)
            ->setBody(json_encode($this->util->logDataReset($basic->getPostData())))
        );
        $this->getEntityManager()->flush();
    }
    
    /**
     * @param unknown $orderId
     * @param Basic $basic
     */
    public function addReavResponseLog($orderId, Basic $basic)
    {
        $this->getEntityManager()->persist(
            $this->addLog($orderId, $basic->getContent())
            ->setRequestFlg(0)
            ->setSendFlg(0)
            ->setBody(json_encode($this->util->logDataReset($basic->getPostData())))
        );
        $this->getEntityManager()->flush();
    }
    
    /**
     * @param unknown $orderId
     * @param Basic $basic
     */
    public function addReavRequestLog($orderId, Basic $basic)
    {
        $this->getEntityManager()->persist(
            $this->addLog($orderId, $basic->getContent())
            ->setRequestFlg(1)
            ->setSendFlg(0)
            ->setBody(json_encode($this->util->logDataReset($basic->getPostData())))
        );
        $this->getEntityManager()->flush();
    }
    
    /**
     * オンライン決済通知の処理通番によりIDをとる
     * @param unknown $transactionId
     */
    public function getRevOrderIdForTid($transactionId)
    {
        $em = $this->getEntityManager();
        $data = $em->createQuery(
            'SELECT o.id FROM Eccube\Entity\Order o JOIN Plugin\SlnPayment42\Entity\OrderPaymentHistory pay_h
                WITH (o.id = pay_h.orderId) WHERE pay_h.transactionId = :tid'
            )->setParameter(":tid", $transactionId)
            ->setMaxResults(1)
            ->getResult();
        if(count($data)) {
            return $data[0]['id'];
        }
        return null;
    }
}
